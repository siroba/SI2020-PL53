package UserStory13573;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import Entities.FormativeAction;
import Entities.Teacher;
import Entities.FormativeAction.Status;
import Entities.Session;
import PL53.util.Date;
import PL53.util.DateTime;
import Utils.SwingUtil;

public class Controller implements PL53.util.Controller {
	private Model model;
	private View view;
	private List<Session> sessions = new ArrayList<Session>();
	
	public Controller(Model m, View v) {
		this.model = m;
		this.view = v;
		//no model-specific initialization, only view-specific initialization
		this.initView();
	}
	
	/**
	 * Controller initialization: add event handlers to the UI objects.
	 * Each event handler is instantiated in the same way, so that it invokes a private method of this handler, enclosed in a generic exception handler to display windows.
	 * Each event handler is instantiated in the same way, so that it invokes a private method of this controller, enclosed in a generic exception handler to display popup windows when a problem or exception occurs.
	 * popup windows when a problem or controlled exception occurs.
	 */
	public void initController() {
		view.getCreateBtn().addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				//does not use mouseClicked because when setting single selection in the race table
				//the user could drag the mouse over several rows and only the last one is of interest.
				SwingUtil.exceptionWrapper(() -> createFormativeAction());
			}
		});
		
		view.getBtnAddSession().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				sessions.add(new Session(
						view.getLocation(),
						view.getTeacher(),
						view.getNumberOfHours(),
						view.getRemuneration(),
						view.getSessionDatetime()));
				
				view.setTable(getTableModel(sessions));
			}
		});
	}
	
	
	public void initView() {
		//Open window (replaces the main generated by WindowBuilder)
		view.getFrame().setVisible(true); 

		view.setTable(getTableModel(sessions));
	}

	
	/**
	 * Create a new formative action object and add it to the db
	 */
	public void createFormativeAction() {
		
		// Reset warnings
		view.setWarningDay("");
		view.setWarningEnrollmentPeriodStart("");
		view.setWarningEnrollmentPeriodEnd("");
		view.setWarningEnrollmentPeriodStart2("");
		view.setWarningEnrollmentPeriodEnd2("");

		// Get dates
		DateTime dateFormativeAction = view.getSessionDatetime();
		DateTime dateEnrollStart = view.getEnrollStart();
		DateTime dateEnrollEnd = view.getEnrollEnd();
		
		List<Session> sessions = this.getSessions();
		
		// Validate dates  
		if (validateDates(dateFormativeAction, dateEnrollStart, dateEnrollEnd)) {
			// Create new formative action and add it to DB 
			FormativeAction formativeAction = new FormativeAction(
					view.getName(), 
					view.getFee(), 
					view.getSpaces(), 
					view.getObjectives(), 
					view.getMainContents(),
					FormativeAction.Status.ACTIVE, 
					dateEnrollStart, 
					dateEnrollEnd);
			
			formativeAction.setSessions(sessions);
			
			try {
				model.setFormativeAction(formativeAction);
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	private List<Session> getSessions() {
		return sessions;
	}

	/**
	 * Check if the provided dates for the formative action, the start & end of the enrollment period are valid 
	 */
	public boolean validateDates(DateTime formativeAction,DateTime enrollStart, DateTime enrollEnd) {
		DateTime now = DateTime.now();
		long daysBetweenStartAction = DateTime.daysSince(formativeAction, enrollStart);
		long daysBetweenEndAction = DateTime.daysSince(formativeAction, enrollEnd);
		long daysBetweenStartEnd = DateTime.daysSince(enrollEnd, enrollStart);
		long daysBetweenNowStart = DateTime.daysSince(enrollStart, now);
		long daysBetweenNowEnd = DateTime.daysSince(enrollEnd, now);
		long daysBetweenNowAction = DateTime.daysSince(formativeAction, now);
		
		if (daysBetweenNowAction < 0) {
			view.setWarningDay("Can't take place in the past");
			return false;
		}
		if (daysBetweenNowStart < 0) {
			view.setWarningEnrollmentPeriodStart2("Can't start in the past");
			return false;
		}
		if (daysBetweenNowEnd < 0) {
			view.setWarningEnrollmentPeriodEnd2("Can't end in the past");
			return false;
		}
		if (daysBetweenStartAction < 21) {
			view.setWarningEnrollmentPeriodStart2("Should begin at least 3 weeks before formative action");
			return false;
		}
		if (daysBetweenEndAction <= 0) {
			view.setWarningEnrollmentPeriodEnd2("Should end before formative action begins");
			return false;
		}
		if (daysBetweenStartEnd <= 0) {
			view.setWarningEnrollmentPeriodEnd2("Not enough time between start and end of enrollment period");
			return false;
		}
		
		return true; 
	}
	
	public TableModel getTableModel(List<Session> sessions) {
		String header[] = {"Date", "Location", "Teacher", "Remuneration" };

		String body[][] = new String[sessions.size()][header.length];

		int i = 0;
		for(Session s: sessions) {
			body[i++] = new String[] { s.getSessionStart().toString(), s.getLocation(), s.getTeacherName(), Float.toString(s.getRemuneration()) };
		}

		TableModel tm = new DefaultTableModel(header, body.length);

		for (i = 0; i < body.length; i++) {
			for (int j = 0; j < header.length; j++) {
				tm.setValueAt(body[i][j], i, j);
			}
		}

		return tm;
	}
}
