package UserStory13573;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import Entities.FormativeAction;
import Entities.Teacher;
import Entities.FormativeAction.Status;
import PL53.SI2020_PL53.Date;
import PL53.SI2020_PL53.DateTime;
import Utils.SwingUtil;

public class Controller {
	private Model model;
	private View view;
	
	public Controller(Model m, View v) {
		this.model = m;
		this.view = v;
		//no model-specific initialization, only view-specific initialization
		this.initView();
	}
	
	/**
	 * Controller initialization: add event handlers to the UI objects.
	 * Each event handler is instantiated in the same way, so that it invokes a private method of this handler, enclosed in a generic exception handler to display windows.
	 * Each event handler is instantiated in the same way, so that it invokes a private method of this controller, enclosed in a generic exception handler to display popup windows when a problem or exception occurs.
	 * popup windows when a problem or controlled exception occurs.
	 */
	public void initController() {
		view.getCreateBtn().addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				//does not use mouseClicked because when setting single selection in the race table
				//the user could drag the mouse over several rows and only the last one is of interest.
				SwingUtil.exceptionWrapper(() -> createFormativeAction());
			}
		});
	}
	
	
	public void initView() {
		//Open window (replaces the main generated by WindowBuilder)
		view.getFrame().setVisible(true); 

	}

	
	/**
	 * Create a new formative action object and add it to the db
	 */
	public void createFormativeAction() {
		
		// Reset warnings
		view.setWarningDay("");
		view.setWarningEnrollmentPeriodStart("");
		view.setWarningEnrollmentPeriodEnd("");
		view.setWarningEnrollmentPeriodStart2("");
		view.setWarningEnrollmentPeriodEnd2("");
		
		// Get dates
		DateTime dateFormativeAction = new DateTime(Integer.parseInt(view.getDayMinute()), Integer.parseInt(view.getDayHour()), Integer.parseInt(view.getDayDay()), Integer.parseInt(view.getDayMonth()), Integer.parseInt(view.getDayYear()));
		DateTime dateEnrollStart = new DateTime(0, 0, Integer.parseInt(view.getEnrollStartDay()), Integer.parseInt(view.getEnrollStartMonth()), Integer.parseInt(view.getEnrollStartYear()));
		DateTime dateEnrollEnd = new DateTime(0, 0, Integer.parseInt(view.getEnrollEndDay()), Integer.parseInt(view.getEnrollEndMonth()), Integer.parseInt(view.getEnrollEndYear()));
		
		// Validate dates  
		if (validateDates(dateFormativeAction, dateEnrollStart, dateEnrollEnd)==false) {
			return;
		}

		// Create new formative action and add it to DB 
		FormativeAction formativeAction = new FormativeAction(view.getName(), Float.parseFloat(view.getNumberOfHours()), view.getLocation(), Float.parseFloat(view.getRemuneration()), Float.parseFloat(view.getFee()), Integer.parseInt(view.getSpaces()), 
																view.getObjectives(), view.getMainContents(), view.getTeacher(), FormativeAction.Status.ACTIVE, dateFormativeAction, dateEnrollStart, dateEnrollEnd);
		model.setFormativeAction(formativeAction);
		view.getFrame().setVisible(false); 
		
	}
	
	/**
	 * Check if the provided dates for the formative action, the start & end of the enrollment period are valid 
	 */
	public boolean validateDates(Date formativeAction,Date enrollStart, Date enrollEnd) {
		DateTime now = DateTime.now();
		long daysBetweenStartAction = DateTime.daysSince(formativeAction, enrollStart);
		long daysBetweenEndAction = DateTime.daysSince(formativeAction, enrollEnd);
		long daysBetweenStartEnd = DateTime.daysSince(enrollEnd, enrollStart);
		long daysBetweenNowStart = DateTime.daysSince(enrollStart, now);
		long daysBetweenNowEnd = DateTime.daysSince(enrollEnd, now);
		long daysBetweenNowAction = DateTime.daysSince(formativeAction, now);
		
		System.out.println(daysBetweenStartAction);
		System.out.println(daysBetweenEndAction);
		System.out.println(daysBetweenStartEnd);
		System.out.println(daysBetweenNowStart);
		System.out.println(daysBetweenNowEnd);
		System.out.println(daysBetweenNowAction);
		
		if (daysBetweenNowAction < 0) {
			view.setWarningDay("Can't take place in the past");
			return false;
		}
		if (daysBetweenNowStart < 0) {
			view.setWarningEnrollmentPeriodStart2("Can't start in the past");
			return false;
		}
		if (daysBetweenNowEnd < 0) {
			view.setWarningEnrollmentPeriodEnd2("Can't end in the past");
			return false;
		}
		if (daysBetweenStartAction < 21) {
			view.setWarningEnrollmentPeriodStart2("Should begin at least 3 weeks before formative action");
			return false;
		}
		if (daysBetweenEndAction <= 0) {
			view.setWarningEnrollmentPeriodEnd2("Should end before formative action begins");
			return false;
		}
		if (daysBetweenStartEnd <= 0) {
			view.setWarningEnrollmentPeriodEnd2("Not enough time between start and end of enrollment period");
			return false;
		}
		
		return true; 
	}
}
