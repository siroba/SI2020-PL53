package BaseProject;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import javax.swing.table.TableModel;

public class CourseController {
	private CourseModel model;
	private CourseView view;
	private String lastSelectedKey=""; //remembers the last selected row to restore it when changing the race table
	
	public CourseController(CourseModel m, CourseView v) {
		this.model = m;
		this.view = v;
		//no model-specific initialization, only view-specific initialization
		this.initView();
	}
	
	/**
	 * Controller initialization: add event handlers to the UI objects.
	 * Each event handler is instantiated in the same way, so that it invokes a private method of this handler, enclosed in a generic exception handler to display windows.
	 * Each event handler is instantiated in the same way, so that it invokes a private method of this controller, enclosed in a generic exception handler to display popup windows when a problem or exception occurs.
	 * popup windows when a problem or controlled exception occurs.
	 */
	public void initController() {
		//In the case of the mouse listener (to detect selection of a row) it is not a functional interface since it has several methods.
		//see discussion: https://stackoverflow.com/questions/21833537/java-8-lambda-expressions-what-about-multiple-methods-in-nested-class
		view.getTableCourses().addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent e) {
				//does not use mouseClicked because when setting single selection in the race table
				//the user could drag the mouse over several rows and only the last one is of interest.
				SwingUtil.exceptionWrapper(() -> showDetails());
			}
		});
	}
	
	public void initView() {
		//Updates the view data
		this.getListCourses();
		
		//Open window (replaces the main generated by WindowBuilder)
		view.getFrame().setVisible(true); 
	}
	
	/**
	 * Getting the list of races just needs to get the list of objects from the model 
	 * and use SwingUtil method to create a table model which is finally assigned to the table.
	 */
	public void getListCourses() {
		List<CourseEntity> courses=model.getListCourses();
		TableModel tmodel=SwingUtil.getTableModelFromPojos(courses, new String[] {"id", "name"});
		view.getTableCourses().setModel(tmodel);
		SwingUtil.autoAdjustColumns(view.getTableCourses());
	}
	/**
	 * When selecting an item in the table, it shows the detail with the value of the discount percentage of the selected race and the values of this entity.
	 * of the selected race and the values of this entity.
	 */
	public void showDetails() {
		//Obtains the selected key and saves it to remember the selection in future interactions.
		this.lastSelectedKey=SwingUtil.getSelectedKey(view.getTableCourses());
		int idCourse=Integer.parseInt(this.lastSelectedKey);
		
		//Details of the selected career
		CourseEntity course=model.getCourse(idCourse);
		TableModel tmodel=SwingUtil.getRecordModelFromPojo(course, new String[] {"day", "teacher","location", "startTime", "endTime", "price", "spots"});
		view.getTableCourseDetails().setModel(tmodel);
		SwingUtil.autoAdjustColumns(view.getTableCourseDetails());
	}
	

}
