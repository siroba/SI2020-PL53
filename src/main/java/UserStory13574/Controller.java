package UserStory13574;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;

import BaseProject.SwingUtil;
import Entities.FormativeAction;

public class Controller {
	private Model model;
	private View view;
	private String lastSelectedKey=""; //remembers the last selected row to restore it when changing the race table
	private FormativeAction selected = null;
	
	public Controller() {
		this.model = new Model();
		model.loadFormativeActions(20);
		
		this.view = new View();
		//no model-specific initialization, only view-specific initialization
		this.initView();
	}
	
	/**
	 * Controller initialization: add event handlers to the UI objects.
	 * Each event handler is instantiated in the same way, so that it invokes a private method of this handler, enclosed in a generic exception handler to display windows.
	 * Each event handler is instantiated in the same way, so that it invokes a private method of this controller, enclosed in a generic exception handler to display popup windows when a problem or exception occurs.
	 * popup windows when a problem or controlled exception occurs.
	 */
	public void initController() {
		view.getEnrollBtn().addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				int index = view.getFAList().getSelectedIndex();
				if(index >= 0) {
					selected = selectFormativeAction(index);
					view.setTextSelectedFA(selected.getName());
					view.changeView(true);
					
				}
			}
		});
		
		view.getFAList().addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				
			}
		});
	}
	
	
	public void initView() {
		//Open window (replaces the main generated by WindowBuilder)
		
		//view.setFAList(model.getFormativeActions());
		view.setVisible(true); 
	}

	private FormativeAction selectFormativeAction(int n) {
		return model.getFormativeAction(n);
	}
	

}